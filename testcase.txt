valgrind --leak-check=full --suppressions=readline.supp --show-leak-kinds=all --track-fds=yes --trace-children=yes ./minishell

#1
<< OK | | cat -e
#should has error

#2
<<OK|cat -e
#should print nothing

#3
<<OK|cat -e>>
#should has error

#4
ls|
#should has error

#5
<< OK |cat -e|cat -e  
<< OK #should not has error
<< |a #should has error


#6
check if here doc unlink temp files

#7
#echo $_

#8
export 比env少一行

#9
<< OK |<< KO| << KO cat
<< OK | << KO cat|<<KO
#should has error

#10
echo hello|cat
ls|echo hello|cat

#11
bash ls|./minishell

#12
heredoc ctrl c
segfault

#13
< test.sh|cat|<test.sh<<OK cat -e
<< OK cat|< test.sh

#14
< test.sh cat|cat -e > outfile >>outfile2
when outfile has no access

#15
ctrl\ quit in execution

#16
echo "$HOME"'$HOME'

#17
'/bin/ls abbb'
no such file...

#18
$? + $?

#19
echo "cat|cat -e|"
echo "cat|cat -e|"
echo "cat$HOME|cat -e|"
echo "cat$HOME|cat -e'test'|"

#20
valgrind --leak-check=full --suppressions=readline.supp --show-leak-kinds=all --track-fds=yes --trace-children=yes ./minishell

#21
clear   2fds hasn't closed

#22
valgrind   << OK cat      this case is ok without leak and unclosed fds

#23
ctrl D   ok
<<  ctrl D  ok

#24
echo | |env     leak
ls >> >> cat     leak
ls||cat    no leak
<< OK |cat    when there is no command in child, there will be leak
<< OK         leak
<< OK cat      ctrl C break here doc      leak and error
<< OK cat      ctrl D break here doc      OK
<< OK cat |sleep 10      OK
< test.sh > outfile    no command leak  ??
< test.sh cat > outfile     OK


#25
dup in redin and redout need to protect

#26
echo "Hello||world|"|echo              OK
echo "Hello||world|"lets'do a test'    OK
echo "Hello||world|"		       OK										
echo "Hello||world|                    OK
echo "cat lol.c | cat > lol.c$HOME"    OK
echo "cat lol.c | cat > lol.c"	       OK
echo "Hello $HOME"		       OK
echo 'Hello $HOME'                     OK
echo "Hello $HOME"test'$HOME'          OK
<< OK cat     '$HOME' in here doc      OK
<< OK cat     "$HOME" in here doc      OK
<< OK cat     $HOME in here doc        OK

#26
env                                   OK
export A=10			     invalid read & leak KO 
export 3			     invalid read & leak KO 
export A=1 B=2			     invalid read & leak KO 
export A B C			     invalid read & leak KO

unset				      OK
unset HOME			      OK
unset PATH    ls  
	bash: ls: No such file or directory
	minishell: ls: command not found
	
	in general when command does't exist there are memory errors.

#27
export PATH=/home/shuwang/sw/FINISHED_PROJECT/so_long:/home/shuwang/sw/philo/philo/
philo				  OK
export PATH=/home/shuwang/sw/philo/philo/:/home/shuwang/sw/FINISHED_PROJECT/so_long
philo                             OK

#28
cat lexer.c|grep int| cat -e>outfile1>outfile2   OK with or without outifile1 permission

#29
cat|cat|ls      OK

#30
echo "'Hello$USER'"  	OK
echo 'Hello$USER'	OK

#31
echo hello>outfile               builtin in parent KO
echo hello>>outfile		 builtin in parent KO
ls > outfile			 non builtin in children OK
ls >> outfile			 non builtin in children OK
env|echo "Hello" > outfile	 builtin in children OK
env|echo "Hello" >> outfile	 builtin in children OK

builtin doesn't read from stdin so can't test redin in parent, maybe don't need

#32
normal control c  OK

#33
write here_doc function      set message

#34
when abs path doesn't exist, there is an error

#35
yf&sw@minishell*main$ /home/shuwang/sw/minishell/src_sw

double free

#35
first time open a file, there will be error when copy file

#36
double free when in a directory

#37
when there is a lot of space there will be error
